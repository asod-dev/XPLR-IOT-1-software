import groovy.json.JsonSlurper   // For parsing HTTP get responses
import java.net.URLConnection    // For control of the KMTronic power switch
import hudson.plugins.git.GitSCM // So that we can make scmPlus
import hudson.plugins.git.UserRemoteConfig // So that we can add master to the scm

node('TEST-gb-cmb-dt-022')
{
    def git_commit_text
    def changed_files
    def subst_drive = "z:"
    // If you change the following line you need to change EXCLUDE_PATTERNS in Doxyfile to match
    def working_dir = "_jenkins_work"
    def ubxlib_dir = "ubxlib"
    def archive_dir = working_dir
    def summary_file = "summary.log"
    def test_report_file = "test_report.xml"
    def debug_file = "debug.log"
    // The KMTronic web relay on 10.20.4.157 controls power to the
    // 12 V supply of each of the EVKs  The last byte of the URL
    // is a bit-map of the outputs where 0 sets off and 1 sets on
    def power_switch_off = new URL("http://10.20.4.157/FFE000")
    def power_switch_on = new URL("http://10.20.4.157/FFE0FF")
    def return_value = 1

    // Using the try/catch pattern as recommended in this post:
    // https://stackoverflow.com/questions/48989238/post-equivalent-in-scripted-pipeline
    // ... in order to have an archive step that is always
    // run while in the "scripted pipeline" world
    try {
        // All the stages go here
        timeout(time: 100, unit: 'MINUTES') {
            stage("Info") {
                environment = bat(script: "@echo off & set", returnStdout: true).trim()
                println "Environment variables are: \n" + environment

                // For debug purposes, print out the entries in the scm map
                // passed to us from the CloudBees magic
                println "scm contains: " + scm.properties.each{entry -> "$entry.key = $entry.value"} + "\n"
            }

            stage("Fetch") {
                dir(ubxlib_dir) {
                    // Create a modified version of the remote configs in scm to
                    // add master.  With master fetched as well as the
                    // branch-under-test  we can get the file difference between the two
                    println "Creating scmPlus to add fetch of master...\n"
                    refspec = scm.userRemoteConfigs[0].refspec
                    if (!scm.userRemoteConfigs[0].refspec.contains("/master:")) {
                        refspec += " refs/heads/master:refs/remotes/origin/master"
                    }
                    userRemoteConfigPlus = new UserRemoteConfig(scm.userRemoteConfigs[0].url,
                                                                scm.userRemoteConfigs[0].name,
                                                                refspec,
                                                                scm.userRemoteConfigs[0].credentialsId)

                    scmPlus = new GitSCM([userRemoteConfigPlus],
                                        scm.branches,
                                        scm.doGenerateSubmoduleConfigurations,
                                        scm.submoduleCfg,
                                        scm.browser,
                                        scm.gitTool,
                                        scm.extensions)

                    // For debug purposes, print out scmPlus
                    println "scmPlus contains: " + scmPlus.properties.each{entry -> "$entry.key = $entry.value"} + "\n"

                    // Get the code
                    println "checkout() branch \"" + scmPlus.branches[0] + "\" and also fetch master...\n"
                    scmMap = checkout scmPlus

                    // Recurse submodules
                    println "Recursing submodules..."
                    bat "git submodule update --init"

                    // For debug purposes, print out the entries in the scm
                    // map returned by checkout
                    println "checkout() returned: " + scmMap.each{entry -> "$entry.key = $entry.value"}

                    // Use git to get the last commit message, @echo off to avoid capturing the command
                    // output as well as the returned text
                    git_commit_text = bat(script: "@echo off & git log -1 --pretty=%%B", returnStdout: true)

                    if (git_commit_text) {
                        // Convert newlines to "/n" and quotation marks to back-ticks to prevent them
                        // screwing up the command-line they get passed to lower down
                        git_commit_text = git_commit_text.replaceAll("\\n", "\\\\n").replaceAll("\"", "`")
                        println "Last commit message was: \"" + git_commit_text + "\""
                    } else {
                        println "Unable to get last commit message."
                    }
                }
            }

            if ((env.CHANGE_TARGET && env.CHANGE_ID) || !env.JOB_BASE_NAME || (env.JOB_BASE_NAME == "master")) {
                println "Either this is a pull request or we're on master or the branch name is not specified: all tests will be run."
            } else {
                // This is not master and not yet a pull request,
                // so we can save time by only running selected tests 
                println "This is not master, checking which tests to run..."
                try {
                    stage("Check Branch Differences") {
                        dir(ubxlib_dir) {
                            if (env.JOB_BASE_NAME) {
                                // No user direction so use git to get the list
                                // of file differences from main, @echo off to avoid
                                // capturing the command output as well as the  returned text
                                println "Checking for changed files between master and " + env.JOB_BASE_NAME + "..."
                                changed_files = bat(script: "@echo off & git diff --name-only origin/master", returnStdout: true).trim()
                                changed_files = changed_files.replaceAll("\n", " ");
                                println "Changed file(s) were: " + changed_files
                            } else {
                                println "Environment variable JOB_BASE_NAME not found, unable to determine the files that are different to master."
                            }
                        }
                    }
                } catch (e) {
                    println "Git was unable to determine the files that are different to master."
                }
            }

            stage("Environment Check") {
                if (bat(script: "@echo off & python --version", returnStatus: true) != 0) {
                    error("Python is not available on the build machine.")
                }
            }

            jenkins_dir = pwd()
            // Delete any previously subst'ed drive, no check for errors 'cos there might not be one
            script {
                try {
                    bat(script: "@echo off & subst ${subst_drive} /D")
                } catch (err) {
                    // Do nothing
                }
            }
            // Now subst the drive
            if (bat(script: "subst ${subst_drive} ${jenkins_dir}", returnStatus: true) == 0) {
                // Need to add the "\" to the drive name or if something CD's to it they may not end up in the root
                ubxlib_dir = subst_drive + "\\" + ubxlib_dir
                working_dir = subst_drive + "\\" + working_dir
            } else {
                ubxlib_dir = jenkins_dir + "\\" + ubxlib_dir
                working_dir = jenkins_dir + "\\" + working_dir
                error("Unable to subst ${subst_drive} for \"${jenkins_dir}\", builds with long path lengths may fail.")
            }
            stage ("Reset USB/Power") {
                // usbswitchcmd sets a return value of 1 if it was given the
                // parameter 1 and a return value of 0 if it was given the
                // parameter 0. However Groovy insists on treating a non-zero
                // return value as an error, no matter what I do, so here
                // each "1" step has to be wrapped in try/catch.

                // Disconnect USBs and switch off power
                try {
                    bat(script: "usbswitchcmd -s -n 1750664 1")
                } catch (err) {
                }
                try {
                    bat(script: "usbswitchcmd -s -n 1750665 1")
                } catch (err) {
                }
                println "Switching off power to EVKs returned HTTP response " + power_switch_off.openConnection().getResponseCode() + "."
                sleep(time: 5, unit: 'SECONDS')
                // Switch on power and reconnect USBs
                power_switch_on.openConnection()
                bat(script: "usbswitchcmd -s -n 1750664 0")
                bat(script: "usbswitchcmd -s -n 1750665 0")
                println "Switching on power to EVKs again returned HTTP response " + power_switch_on.openConnection().getResponseCode() + "."
                sleep(time: 5, unit: 'SECONDS')
            }
            dir (working_dir) {
                if (changed_files) {
                    stage("Test Selected") {
                        // Call python to run the necessary builds and tests
                        return_value = bat(script: "@echo off & cd ${ubxlib_dir}\\port\\platform\\common\\automation & python u_run_branch.py -u ${ubxlib_dir} -w ${working_dir} -s ${summary_file} -t ${test_report_file} -d ${debug_file} \"${git_commit_text}\" ${changed_files}", returnStatus: true)
                        if (return_value != 0) {
                            error("Running selected ubxlib test(s) returned error " + return_value + ".")
                        } else {
                            println "The selected ubxlib test(s) passed."
                        }
                    }
                } else {
                    stage("Test All") {
                        // Call python to run all tests
                        return_value = bat(script: "@echo off & cd ${ubxlib_dir}\\port\\platform\\common\\automation & python u_run_branch.py -u ${ubxlib_dir} -w ${working_dir} -s ${summary_file} -t ${test_report_file} -d ${debug_file} \"test: *\"", returnStatus: true)
                        if (return_value != 0) {
                            error("Running all ubxlib tests returned " + return_value + " failed test(s).")
                        } else {
                            println "All ubxlib tests passed."
                        }
                    }
                }
            }
        }
    } catch (e) {
        println "Failed."
        // Since we're catching the exception in order to report on it,
        // we need to re-throw it, to ensure that the build is marked as failed
        throw e
    } finally {
        // Archive artifacts from working_dir and one level down ('cos there may be an instance directory below the working directory)
        archiveArtifacts artifacts: "${archive_dir}\\${summary_file}, ${archive_dir}\\${test_report_file}, ${archive_dir}\\${debug_file}, ${archive_dir}\\**\\${summary_file}, ${archive_dir}\\**\\${test_report_file}, ${archive_dir}\\**\\${debug_file}", allowEmptyArchive: true
    }
}
